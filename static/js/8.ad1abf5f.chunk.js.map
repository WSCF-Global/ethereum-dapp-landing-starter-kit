{"version":3,"sources":["../node_modules/secp256k1/lib/index.js","../node_modules/secp256k1/lib/assert.js","../node_modules/secp256k1/lib/der.js","../node_modules/bip66/index.js","../node_modules/secp256k1/lib/elliptic/index.js","../node_modules/secp256k1/elliptic.js"],"names":["assert","require","der","messages","initCompressedValue","value","defaultValue","undefined","isBoolean","COMPRESSED_TYPE_INVALID","module","exports","secp256k1","privateKeyVerify","privateKey","isBuffer","EC_PRIVATE_KEY_TYPE_INVALID","length","privateKeyExport","compressed","isBufferLength","EC_PRIVATE_KEY_LENGTH_INVALID","publicKey","privateKeyImport","Error","EC_PRIVATE_KEY_IMPORT_DER_FAIL","privateKeyNegate","privateKeyModInverse","privateKeyTweakAdd","tweak","TWEAK_TYPE_INVALID","TWEAK_LENGTH_INVALID","privateKeyTweakMul","publicKeyCreate","publicKeyConvert","EC_PUBLIC_KEY_TYPE_INVALID","isBufferLength2","EC_PUBLIC_KEY_LENGTH_INVALID","publicKeyVerify","publicKeyTweakAdd","publicKeyTweakMul","publicKeyCombine","publicKeys","isArray","EC_PUBLIC_KEYS_TYPE_INVALID","isLengthGTZero","EC_PUBLIC_KEYS_LENGTH_INVALID","i","signatureNormalize","signature","ECDSA_SIGNATURE_TYPE_INVALID","ECDSA_SIGNATURE_LENGTH_INVALID","signatureExport","sigObj","signatureImport","sig","ECDSA_SIGNATURE_PARSE_DER_FAIL","signatureImportLax","sign","message","options","MSG32_TYPE_INVALID","MSG32_LENGTH_INVALID","data","noncefn","isObject","OPTIONS_TYPE_INVALID","OPTIONS_DATA_TYPE_INVALID","OPTIONS_DATA_LENGTH_INVALID","isFunction","OPTIONS_NONCEFN_TYPE_INVALID","verify","recover","recovery","isNumber","RECOVERY_ID_TYPE_INVALID","isNumberInInterval","RECOVERY_ID_VALUE_INVALID","ecdh","ecdhUnsafe","toString","Object","prototype","Array","TypeError","call","Buffer","buffer","RangeError","length1","length2","number","x","y","bip66","EC_PRIVKEY_EXPORT_DER_COMPRESSED","from","EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED","result","copy","index","lenb","len","slice","r","concat","lenR","posR","s","lenS","posS","encode","alloc","decode","err","lenbyte","rlen","rindex","slen","sindex","rvalue","svalue","check","allocUnsafe","createHash","BN","EC","ec","ecparams","curve","loadPublicKey","first","xBuffer","cmp","p","toRed","red","redSqr","redIMul","redIAdd","b","redSqrt","isOdd","redNeg","keyPair","pub","loadCompressedPublicKey","yBuffer","x3","redISub","isZero","loadUncompressedPublicKey","bn","n","d","EC_PRIVATE_KEY_EXPORT_DER_FAIL","keyFromPrivate","getPublic","sub","umod","toArrayLike","EC_PRIVATE_KEY_RANGE_INVALID","invm","EC_PRIVATE_KEY_TWEAK_ADD_FAIL","iadd","isub","EC_PRIVATE_KEY_TWEAK_MUL_FAIL","imul","EC_PUBLIC_KEY_CREATE_FAIL","pair","EC_PUBLIC_KEY_PARSE_FAIL","EC_PUBLIC_KEY_TWEAK_ADD_FAIL","point","g","mul","add","isInfinity","EC_PUBLIC_KEY_TWEAK_MUL_FAIL","pairs","j","EC_PUBLIC_KEY_COMBINE_FAIL","ECDSA_SIGNATURE_PARSE_FAIL","nh","getNonce","counter","nonce","ECDSA_SIGN_FAIL","canonical","k","pers","recoveryParam","sigr","sigs","recoverPubKey","ECDSA_RECOVER_FAIL","shared","update","digest","scalar","ECDH_FAIL"],"mappings":"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AAM,IAAM,IAAM,EAAM,EAAM,EAAM,GAAM,GAAM,EAAM,EAAM,GAAM,IAAM,GAC1F,IAAM,GAAM,EAAM,EAAM,EAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAC1F,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAC1F,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC1F,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAC1F,GAAM,EAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAC1F,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAC1F,EAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAC1F,IAAM,IAAM,EAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAC1F,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAC1F,IAAM,IAAM,GAAM,GAAM,GAAM,EAAM,EAAM,EAAM,IAAM,GAAM,EAAM,GAAM,EAExE,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC1F,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC1F,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC1F,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC1F,IAGFrF,EAAQO,iBAAmB,SAAUJ,EAAYQ,EAAWH,GAC1D,IAAI+E,EAASZ,EAAOU,KAAK7E,EAAa4E,EAAmCE,GAGzE,OAFAnF,EAAWqF,KAAKD,EAAQ/E,EAAa,EAAI,GACzCG,EAAU6E,KAAKD,EAAQ/E,EAAa,IAAM,KACnC+E,GAGTvF,EAAQY,iBAAmB,SAAUT,GACnC,IAAIG,EAASH,EAAWG,OAGpBmF,EAAQ,EACZ,KAAInF,EAASmF,EAAQ,GAA2B,KAAtBtF,EAAWsF,OAIjCnF,GAHJmF,GAAS,GAGY,IAA2B,IAApBtF,EAAWsF,GAAvC,CAEA,IAAIC,EAA2B,IAApBvF,EAAWsF,GAEtB,GADAA,GAAS,IACLC,EAAO,GAAKA,EAAO,MACnBpF,EAASmF,EAAQC,GAArB,CAGA,IAAIC,EAAMxF,EAAWsF,EAAQC,EAAO,IAAMA,EAAO,EAAIvF,EAAWsF,EAAQC,EAAO,IAAM,EAAI,GAEzF,KAAIpF,GADJmF,GAASC,GACYC,MAGjBrF,EAASmF,EAAQ,GACK,IAAtBtF,EAAWsF,IACe,IAA1BtF,EAAWsF,EAAQ,IACO,IAA1BtF,EAAWsF,EAAQ,OAMnBnF,GAHJmF,GAAS,GAGY,GACK,IAAtBtF,EAAWsF,IACXtF,EAAWsF,EAAQ,GAAK,IACxBnF,EAASmF,EAAQ,EAAItF,EAAWsF,EAAQ,IAI5C,OAAOtF,EAAWyF,MAAMH,EAAQ,EAAGA,EAAQ,EAAItF,EAAWsF,EAAQ,OAGpEzF,EAAQyC,gBAAkB,SAAUC,GAElC,IADA,IAAImD,EAAIlB,EAAOmB,OAAO,CAACnB,EAAOU,KAAK,CAAC,IAAK3C,EAAOmD,IACvCE,EAAO,GAAIC,EAAO,EAAGD,EAAO,GAAiB,IAAZF,EAAEG,MAAkC,IAAdH,EAAEG,EAAO,MAAcD,IAAQC,GAG/F,IADA,IAAIC,EAAItB,EAAOmB,OAAO,CAACnB,EAAOU,KAAK,CAAC,IAAK3C,EAAOuD,IACvCC,EAAO,GAAIC,EAAO,EAAGD,EAAO,GAAiB,IAAZD,EAAEE,MAAkC,IAAdF,EAAEE,EAAO,MAAcD,IAAQC,GAE/F,OAAOhB,EAAMiB,OAAOP,EAAED,MAAMI,GAAOC,EAAEL,MAAMO,KAG7CnG,EAAQ2C,gBAAkB,SAAUC,GAClC,IAAIiD,EAAIlB,EAAO0B,MAAM,GAAI,GACrBJ,EAAItB,EAAO0B,MAAM,GAAI,GAEzB,IACE,IAAI3D,EAASyC,EAAMmB,OAAO1D,GAE1B,GADwB,KAApBF,EAAOmD,EAAEvF,QAAiC,IAAhBoC,EAAOmD,EAAE,KAAanD,EAAOmD,EAAInD,EAAOmD,EAAED,MAAM,IAC1ElD,EAAOmD,EAAEvF,OAAS,GAAI,MAAM,IAAIO,MAAM,wBAE1C,GADwB,KAApB6B,EAAOuD,EAAE3F,QAAiC,IAAhBoC,EAAOuD,EAAE,KAAavD,EAAOuD,EAAIvD,EAAOuD,EAAEL,MAAM,IAC1ElD,EAAOuD,EAAE3F,OAAS,GAAI,MAAM,IAAIO,MAAM,wBAC1C,MAAO0F,GACP,OAMF,OAHA7D,EAAOmD,EAAEL,KAAKK,EAAG,GAAKnD,EAAOmD,EAAEvF,QAC/BoC,EAAOuD,EAAET,KAAKS,EAAG,GAAKvD,EAAOuD,EAAE3F,QAExB,CAAEuF,EAAGA,EAAGI,EAAGA,IAGpBjG,EAAQ8C,mBAAqB,SAAUF,GACrC,IAAIiD,EAAIlB,EAAO0B,MAAM,GAAI,GACrBJ,EAAItB,EAAO0B,MAAM,GAAI,GAErB/F,EAASsC,EAAItC,OACbmF,EAAQ,EAGZ,GAAqB,KAAjB7C,EAAI6C,KAAR,CAGA,IAAIe,EAAU5D,EAAI6C,KAClB,KAAc,IAAVe,IACFf,GAASe,EAAU,KACPlG,IAIO,IAAjBsC,EAAI6C,KAAR,CAGA,IAAIgB,EAAO7D,EAAI6C,KACf,GAAW,IAAPgB,EAAa,CAEf,GAAIhB,GADJe,EAAUC,EAAO,KACKnG,EAAQ,OAC9B,KAAOkG,EAAU,GAAoB,IAAf5D,EAAI6C,GAAiBA,GAAS,EAAGe,GAAW,GAClE,IAAKC,EAAO,EAAGD,EAAU,EAAGf,GAAS,EAAGe,GAAW,EAAGC,GAAQA,GAAQ,GAAK7D,EAAI6C,GAEjF,KAAIgB,EAAOnG,EAASmF,GAApB,CACA,IAAIiB,EAASjB,EAIb,GAHAA,GAASgB,EAGY,IAAjB7D,EAAI6C,KAAR,CAGA,IAAIkB,EAAO/D,EAAI6C,KACf,GAAW,IAAPkB,EAAa,CAEf,GAAIlB,GADJe,EAAUG,EAAO,KACKrG,EAAQ,OAC9B,KAAOkG,EAAU,GAAoB,IAAf5D,EAAI6C,GAAiBA,GAAS,EAAGe,GAAW,GAClE,IAAKG,EAAO,EAAGH,EAAU,EAAGf,GAAS,EAAGe,GAAW,EAAGG,GAAQA,GAAQ,GAAK/D,EAAI6C,GAEjF,KAAIkB,EAAOrG,EAASmF,GAApB,CACA,IAAImB,EAASnB,EAIb,IAHAA,GAASkB,EAGFF,EAAO,GAAqB,IAAhB7D,EAAI8D,GAAkBD,GAAQ,EAAGC,GAAU,GAE9D,KAAID,EAAO,IAAX,CACA,IAAII,EAASjE,EAAIgD,MAAMc,EAAQA,EAASD,GAIxC,IAHAI,EAAOrB,KAAKK,EAAG,GAAKgB,EAAOvG,QAGpBqG,EAAO,GAAqB,IAAhB/D,EAAIgE,GAAkBD,GAAQ,EAAGC,GAAU,GAE9D,KAAID,EAAO,IAAX,CACA,IAAIG,EAASlE,EAAIgD,MAAMgB,EAAQA,EAASD,GAGxC,OAFAG,EAAOtB,KAAKS,EAAG,GAAKa,EAAOxG,QAEpB,CAAEuF,EAAGA,EAAGI,EAAGA,Y,qBC3LpB,IAAItB,EAASrF,EAAQ,IAAeqF,OAwGpC5E,EAAOC,QAAU,CACf+G,MAvGF,SAAgBnC,GACd,GAAIA,EAAOtE,OAAS,EAAG,OAAO,EAC9B,GAAIsE,EAAOtE,OAAS,GAAI,OAAO,EAC/B,GAAkB,KAAdsE,EAAO,GAAa,OAAO,EAC/B,GAAIA,EAAO,KAAOA,EAAOtE,OAAS,EAAG,OAAO,EAC5C,GAAkB,IAAdsE,EAAO,GAAa,OAAO,EAE/B,IAAImB,EAAOnB,EAAO,GAClB,GAAa,IAATmB,EAAY,OAAO,EACvB,GAAI,EAAIA,GAAQnB,EAAOtE,OAAQ,OAAO,EACtC,GAAyB,IAArBsE,EAAO,EAAImB,GAAgB,OAAO,EAEtC,IAAIG,EAAOtB,EAAO,EAAImB,GACtB,OAAa,IAATG,IACC,EAAIH,EAAOG,IAAUtB,EAAOtE,WAEjB,IAAZsE,EAAO,QACPmB,EAAO,GAAoB,IAAdnB,EAAO,MAA8B,IAAZA,EAAO,SAE1B,IAAnBA,EAAOmB,EAAO,OACdG,EAAO,GAA2B,IAArBtB,EAAOmB,EAAO,MAAqC,IAAnBnB,EAAOmB,EAAO,UAoF/DO,OAhFF,SAAiB1B,GACf,GAAIA,EAAOtE,OAAS,EAAG,MAAM,IAAIO,MAAM,oCACvC,GAAI+D,EAAOtE,OAAS,GAAI,MAAM,IAAIO,MAAM,mCACxC,GAAkB,KAAd+D,EAAO,GAAa,MAAM,IAAI/D,MAAM,yBACxC,GAAI+D,EAAO,KAAOA,EAAOtE,OAAS,EAAG,MAAM,IAAIO,MAAM,kCACrD,GAAkB,IAAd+D,EAAO,GAAa,MAAM,IAAI/D,MAAM,wBAExC,IAAIkF,EAAOnB,EAAO,GAClB,GAAa,IAATmB,EAAY,MAAM,IAAIlF,MAAM,oBAChC,GAAI,EAAIkF,GAAQnB,EAAOtE,OAAQ,MAAM,IAAIO,MAAM,wBAC/C,GAAyB,IAArB+D,EAAO,EAAImB,GAAgB,MAAM,IAAIlF,MAAM,4BAE/C,IAAIqF,EAAOtB,EAAO,EAAImB,GACtB,GAAa,IAATG,EAAY,MAAM,IAAIrF,MAAM,oBAChC,GAAK,EAAIkF,EAAOG,IAAUtB,EAAOtE,OAAQ,MAAM,IAAIO,MAAM,uBAEzD,GAAgB,IAAZ+D,EAAO,GAAW,MAAM,IAAI/D,MAAM,uBACtC,GAAIkF,EAAO,GAAoB,IAAdnB,EAAO,MAA8B,IAAZA,EAAO,IAAY,MAAM,IAAI/D,MAAM,8BAE7E,GAAuB,IAAnB+D,EAAOmB,EAAO,GAAW,MAAM,IAAIlF,MAAM,uBAC7C,GAAIqF,EAAO,GAA2B,IAArBtB,EAAOmB,EAAO,MAAqC,IAAnBnB,EAAOmB,EAAO,IAAY,MAAM,IAAIlF,MAAM,8BAG3F,MAAO,CACLgF,EAAGjB,EAAOgB,MAAM,EAAG,EAAIG,GACvBE,EAAGrB,EAAOgB,MAAM,EAAIG,KAwDtBK,OA9BF,SAAiBP,EAAGI,GAClB,IAAIF,EAAOF,EAAEvF,OACT4F,EAAOD,EAAE3F,OACb,GAAa,IAATyF,EAAY,MAAM,IAAIlF,MAAM,oBAChC,GAAa,IAATqF,EAAY,MAAM,IAAIrF,MAAM,oBAChC,GAAIkF,EAAO,GAAI,MAAM,IAAIlF,MAAM,wBAC/B,GAAIqF,EAAO,GAAI,MAAM,IAAIrF,MAAM,wBAC/B,GAAW,IAAPgF,EAAE,GAAW,MAAM,IAAIhF,MAAM,uBACjC,GAAW,IAAPoF,EAAE,GAAW,MAAM,IAAIpF,MAAM,uBACjC,GAAIkF,EAAO,GAAe,IAATF,EAAE,MAAyB,IAAPA,EAAE,IAAY,MAAM,IAAIhF,MAAM,8BACnE,GAAIqF,EAAO,GAAe,IAATD,EAAE,MAAyB,IAAPA,EAAE,IAAY,MAAM,IAAIpF,MAAM,8BAEnE,IAAIyB,EAAYqC,EAAOqC,YAAY,EAAIjB,EAAOG,GAY9C,OATA5D,EAAU,GAAK,GACfA,EAAU,GAAKA,EAAUhC,OAAS,EAClCgC,EAAU,GAAK,EACfA,EAAU,GAAKuD,EAAEvF,OACjBuF,EAAEL,KAAKlD,EAAW,GAClBA,EAAU,EAAIyD,GAAQ,EACtBzD,EAAU,EAAIyD,GAAQE,EAAE3F,OACxB2F,EAAET,KAAKlD,EAAW,EAAIyD,GAEfzD,K,kCCxGT,IAAIqC,EAASrF,EAAQ,IAAeqF,OAChCsC,EAAa3H,EAAQ,KACrB4H,EAAK5H,EAAQ,IACb6H,EAAK7H,EAAQ,KAAY8H,GAEzB5H,EAAWF,EAAQ,KAEnB8H,EAAK,IAAID,EAAG,aACZE,EAAWD,EAAGE,MAoClB,SAASC,EAAe5G,GACtB,IAAI6G,EAAQ7G,EAAU,GACtB,OAAQ6G,GACN,KAAK,EACL,KAAK,EACH,OAAyB,KAArB7G,EAAUL,OAAsB,KAvC1C,SAAkCkH,EAAOC,GACvC,IAAIxC,EAAI,IAAIiC,EAAGO,GAGf,GAAIxC,EAAEyC,IAAIL,EAASM,IAAM,EAAG,OAAO,KAInC,IAAIzC,GAHJD,EAAIA,EAAE2C,MAAMP,EAASQ,MAGXC,SAASC,QAAQ9C,GAAG+C,QAAQX,EAASY,GAAGC,UAGlD,OAFe,IAAVV,IAAoBtC,EAAEiD,UAASjD,EAAIA,EAAEkD,UAEnChB,EAAGiB,QAAQ,CAAEC,IAAK,CAAErD,EAAGA,EAAGC,EAAGA,KA6BzBqD,CAAwBf,EAAO7G,EAAUiF,MAAM,EAAG,KAC3D,KAAK,EACL,KAAK,EACL,KAAK,EACH,OAAyB,KAArBjF,EAAUL,OAAsB,KA9B1C,SAAoCkH,EAAOC,EAASe,GAClD,IAAIvD,EAAI,IAAIiC,EAAGO,GACXvC,EAAI,IAAIgC,EAAGsB,GAGf,GAAIvD,EAAEyC,IAAIL,EAASM,IAAM,GAAKzC,EAAEwC,IAAIL,EAASM,IAAM,EAAG,OAAO,KAM7D,GAJA1C,EAAIA,EAAE2C,MAAMP,EAASQ,KACrB3C,EAAIA,EAAE0C,MAAMP,EAASQ,MAGN,IAAVL,GAA4B,IAAVA,IAAmBtC,EAAEiD,WAAuB,IAAVX,GAAiB,OAAO,KAGjF,IAAIiB,EAAKxD,EAAE6C,SAASC,QAAQ9C,GAC5B,OAAKC,EAAE4C,SAASY,QAAQD,EAAGT,QAAQX,EAASY,IAAIU,SAEzCvB,EAAGiB,QAAQ,CAAEC,IAAK,CAAErD,EAAGA,EAAGC,EAAGA,KAF6B,KAgBtD0D,CAA0BpB,EAAO7G,EAAUiF,MAAM,EAAG,IAAKjF,EAAUiF,MAAM,GAAI,KACtF,QACE,OAAO,MAIb5F,EAAQE,iBAAmB,SAAUC,GACnC,IAAI0I,EAAK,IAAI3B,EAAG/G,GAChB,OAAO0I,EAAGnB,IAAIL,EAASyB,GAAK,IAAMD,EAAGF,UAGvC3I,EAAQO,iBAAmB,SAAUJ,EAAYK,GAC/C,IAAIuI,EAAI,IAAI7B,EAAG/G,GACf,GAAI4I,EAAErB,IAAIL,EAASyB,IAAM,GAAKC,EAAEJ,SAAU,MAAM,IAAI9H,MAAMrB,EAASwJ,gCAEnE,OAAOrE,EAAOU,KAAK+B,EAAG6B,eAAe9I,GAAY+I,UAAU1I,GAAY,KAGzER,EAAQe,iBAAmB,SAAUZ,GACnC,IAAI0I,EAAK,IAAI3B,EAAG/G,GAChB,OAAO0I,EAAGF,SAAWhE,EAAO0B,MAAM,IAAMgB,EAASyB,EAAEK,IAAIN,GAAIO,KAAK/B,EAASyB,GAAGO,YAAY1E,EAAQ,KAAM,KAGxG3E,EAAQgB,qBAAuB,SAAUb,GACvC,IAAI0I,EAAK,IAAI3B,EAAG/G,GAChB,GAAI0I,EAAGnB,IAAIL,EAASyB,IAAM,GAAKD,EAAGF,SAAU,MAAM,IAAI9H,MAAMrB,EAAS8J,8BAErE,OAAOT,EAAGU,KAAKlC,EAASyB,GAAGO,YAAY1E,EAAQ,KAAM,KAGvD3E,EAAQiB,mBAAqB,SAAUd,EAAYe,GACjD,IAAI2H,EAAK,IAAI3B,EAAGhG,GAChB,GAAI2H,EAAGnB,IAAIL,EAASyB,IAAM,EAAG,MAAM,IAAIjI,MAAMrB,EAASgK,+BAItD,GAFAX,EAAGY,KAAK,IAAIvC,EAAG/G,IACX0I,EAAGnB,IAAIL,EAASyB,IAAM,GAAGD,EAAGa,KAAKrC,EAASyB,GAC1CD,EAAGF,SAAU,MAAM,IAAI9H,MAAMrB,EAASgK,+BAE1C,OAAOX,EAAGQ,YAAY1E,EAAQ,KAAM,KAGtC3E,EAAQqB,mBAAqB,SAAUlB,EAAYe,GACjD,IAAI2H,EAAK,IAAI3B,EAAGhG,GAChB,GAAI2H,EAAGnB,IAAIL,EAASyB,IAAM,GAAKD,EAAGF,SAAU,MAAM,IAAI9H,MAAMrB,EAASmK,+BAKrE,OAHAd,EAAGe,KAAK,IAAI1C,EAAG/G,IACX0I,EAAGnB,IAAIL,EAASyB,KAAID,EAAKA,EAAGO,KAAK/B,EAASyB,IAEvCD,EAAGQ,YAAY1E,EAAQ,KAAM,KAGtC3E,EAAQsB,gBAAkB,SAAUnB,EAAYK,GAC9C,IAAIuI,EAAI,IAAI7B,EAAG/G,GACf,GAAI4I,EAAErB,IAAIL,EAASyB,IAAM,GAAKC,EAAEJ,SAAU,MAAM,IAAI9H,MAAMrB,EAASqK,2BAEnE,OAAOlF,EAAOU,KAAK+B,EAAG6B,eAAe9I,GAAY+I,UAAU1I,GAAY,KAGzER,EAAQuB,iBAAmB,SAAUZ,EAAWH,GAC9C,IAAIsJ,EAAOvC,EAAc5G,GACzB,GAAa,OAATmJ,EAAe,MAAM,IAAIjJ,MAAMrB,EAASuK,0BAE5C,OAAOpF,EAAOU,KAAKyE,EAAKZ,UAAU1I,GAAY,KAGhDR,EAAQ2B,gBAAkB,SAAUhB,GAClC,OAAoC,OAA7B4G,EAAc5G,IAGvBX,EAAQ4B,kBAAoB,SAAUjB,EAAWO,EAAOV,GACtD,IAAIsJ,EAAOvC,EAAc5G,GACzB,GAAa,OAATmJ,EAAe,MAAM,IAAIjJ,MAAMrB,EAASuK,0BAG5C,IADA7I,EAAQ,IAAIgG,EAAGhG,IACLwG,IAAIL,EAASyB,IAAM,EAAG,MAAM,IAAIjI,MAAMrB,EAASwK,8BAEzD,IAAIC,EAAQ5C,EAAS6C,EAAEC,IAAIjJ,GAAOkJ,IAAIN,EAAKxB,KAC3C,GAAI2B,EAAMI,aAAc,MAAM,IAAIxJ,MAAMrB,EAASwK,8BAEjD,OAAOrF,EAAOU,KAAK4E,EAAM7D,QAAO,EAAM5F,KAGxCR,EAAQ6B,kBAAoB,SAAUlB,EAAWO,EAAOV,GACtD,IAAIsJ,EAAOvC,EAAc5G,GACzB,GAAa,OAATmJ,EAAe,MAAM,IAAIjJ,MAAMrB,EAASuK,0BAG5C,IADA7I,EAAQ,IAAIgG,EAAGhG,IACLwG,IAAIL,EAASyB,IAAM,GAAK5H,EAAMyH,SAAU,MAAM,IAAI9H,MAAMrB,EAAS8K,8BAE3E,OAAO3F,EAAOU,KAAKyE,EAAKxB,IAAI6B,IAAIjJ,GAAOkF,QAAO,EAAM5F,KAGtDR,EAAQ8B,iBAAmB,SAAUC,EAAYvB,GAE/C,IADA,IAAI+J,EAAQ,IAAI/F,MAAMzC,EAAWzB,QACxB8B,EAAI,EAAGA,EAAIL,EAAWzB,SAAU8B,EAEvC,GADAmI,EAAMnI,GAAKmF,EAAcxF,EAAWK,IACnB,OAAbmI,EAAMnI,GAAa,MAAM,IAAIvB,MAAMrB,EAASuK,0BAIlD,IADA,IAAIE,EAAQM,EAAM,GAAGjC,IACZkC,EAAI,EAAGA,EAAID,EAAMjK,SAAUkK,EAAGP,EAAQA,EAAMG,IAAIG,EAAMC,GAAGlC,KAClE,GAAI2B,EAAMI,aAAc,MAAM,IAAIxJ,MAAMrB,EAASiL,4BAEjD,OAAO9F,EAAOU,KAAK4E,EAAM7D,QAAO,EAAM5F,KAGxCR,EAAQqC,mBAAqB,SAAUC,GACrC,IAAIuD,EAAI,IAAIqB,EAAG5E,EAAUsD,MAAM,EAAG,KAC9BK,EAAI,IAAIiB,EAAG5E,EAAUsD,MAAM,GAAI,KACnC,GAAIC,EAAE6B,IAAIL,EAASyB,IAAM,GAAK7C,EAAEyB,IAAIL,EAASyB,IAAM,EAAG,MAAM,IAAIjI,MAAMrB,EAASkL,4BAE/E,IAAInF,EAASZ,EAAOU,KAAK/C,GAGzB,OAFqB,IAAjB2D,EAAEyB,IAAIN,EAAGuD,KAAWtD,EAASyB,EAAEK,IAAIlD,GAAGoD,YAAY1E,EAAQ,KAAM,IAAIa,KAAKD,EAAQ,IAE9EA,GAGTvF,EAAQyC,gBAAkB,SAAUH,GAClC,IAAIuD,EAAIvD,EAAUsD,MAAM,EAAG,IACvBK,EAAI3D,EAAUsD,MAAM,GAAI,IAC5B,GAAI,IAAIsB,EAAGrB,GAAG6B,IAAIL,EAASyB,IAAM,GAAK,IAAI5B,EAAGjB,GAAGyB,IAAIL,EAASyB,IAAM,EAAG,MAAM,IAAIjI,MAAMrB,EAASkL,4BAE/F,MAAO,CAAE7E,EAAGA,EAAGI,EAAGA,IAGpBjG,EAAQ2C,gBAAkB,SAAUD,GAClC,IAAImD,EAAI,IAAIqB,EAAGxE,EAAOmD,GAClBA,EAAE6B,IAAIL,EAASyB,IAAM,IAAGjD,EAAI,IAAIqB,EAAG,IAEvC,IAAIjB,EAAI,IAAIiB,EAAGxE,EAAOuD,GAGtB,OAFIA,EAAEyB,IAAIL,EAASyB,IAAM,IAAG7C,EAAI,IAAIiB,EAAG,IAEhCvC,EAAOmB,OAAO,CACnBD,EAAEwD,YAAY1E,EAAQ,KAAM,IAC5BsB,EAAEoD,YAAY1E,EAAQ,KAAM,OAIhC3E,EAAQ+C,KAAO,SAAUC,EAAS7C,EAAYkD,EAASD,GACrD,GAAuB,oBAAZC,EAAwB,CACjC,IAAIuH,EAAWvH,EACfA,EAAU,SAAUwH,GAClB,IAAIC,EAAQF,EAAS5H,EAAS7C,EAAY,KAAMiD,EAAMyH,GACtD,IAAKlG,EAAOvE,SAAS0K,IAA2B,KAAjBA,EAAMxK,OAAe,MAAM,IAAIO,MAAMrB,EAASuL,iBAE7E,OAAO,IAAI7D,EAAG4D,IAIlB,IAAI/B,EAAI,IAAI7B,EAAG/G,GACf,GAAI4I,EAAErB,IAAIL,EAASyB,IAAM,GAAKC,EAAEJ,SAAU,MAAM,IAAI9H,MAAMrB,EAASuL,iBAEnE,IAAIxF,EAAS6B,EAAGrE,KAAKC,EAAS7C,EAAY,CAAE6K,WAAW,EAAMC,EAAG5H,EAAS6H,KAAM9H,IAC/E,MAAO,CACLd,UAAWqC,EAAOmB,OAAO,CACvBP,EAAOM,EAAEwD,YAAY1E,EAAQ,KAAM,IACnCY,EAAOU,EAAEoD,YAAY1E,EAAQ,KAAM,MAErCb,SAAUyB,EAAO4F,gBAIrBnL,EAAQ4D,OAAS,SAAUZ,EAASV,EAAW3B,GAC7C,IAAI+B,EAAS,CAAEmD,EAAGvD,EAAUsD,MAAM,EAAG,IAAKK,EAAG3D,EAAUsD,MAAM,GAAI,KAE7DwF,EAAO,IAAIlE,EAAGxE,EAAOmD,GACrBwF,EAAO,IAAInE,EAAGxE,EAAOuD,GACzB,GAAImF,EAAK1D,IAAIL,EAASyB,IAAM,GAAKuC,EAAK3D,IAAIL,EAASyB,IAAM,EAAG,MAAM,IAAIjI,MAAMrB,EAASkL,4BACrF,GAAwB,IAApBW,EAAK3D,IAAIN,EAAGuD,KAAaS,EAAKzC,UAAY0C,EAAK1C,SAAU,OAAO,EAEpE,IAAImB,EAAOvC,EAAc5G,GACzB,GAAa,OAATmJ,EAAe,MAAM,IAAIjJ,MAAMrB,EAASuK,0BAE5C,OAAO3C,EAAGxD,OAAOZ,EAASN,EAAQ,CAAEuC,EAAG6E,EAAKxB,IAAIrD,EAAGC,EAAG4E,EAAKxB,IAAIpD,KAGjElF,EAAQ6D,QAAU,SAAUb,EAASV,EAAWwB,EAAUtD,GACxD,IAAIkC,EAAS,CAAEmD,EAAGvD,EAAUsD,MAAM,EAAG,IAAKK,EAAG3D,EAAUsD,MAAM,GAAI,KAE7DwF,EAAO,IAAIlE,EAAGxE,EAAOmD,GACrBwF,EAAO,IAAInE,EAAGxE,EAAOuD,GACzB,GAAImF,EAAK1D,IAAIL,EAASyB,IAAM,GAAKuC,EAAK3D,IAAIL,EAASyB,IAAM,EAAG,MAAM,IAAIjI,MAAMrB,EAASkL,4BAErF,IACE,GAAIU,EAAKzC,UAAY0C,EAAK1C,SAAU,MAAM,IAAI9H,MAE9C,IAAIoJ,EAAQ7C,EAAGkE,cAActI,EAASN,EAAQoB,GAC9C,OAAOa,EAAOU,KAAK4E,EAAM7D,QAAO,EAAM5F,IACtC,MAAO+F,GACP,MAAM,IAAI1F,MAAMrB,EAAS+L,sBAI7BvL,EAAQmE,KAAO,SAAUxD,EAAWR,GAClC,IAAIqL,EAASxL,EAAQoE,WAAWzD,EAAWR,GAAY,GACvD,OAAO8G,EAAW,UAAUwE,OAAOD,GAAQE,UAG7C1L,EAAQoE,WAAa,SAAUzD,EAAWR,EAAYK,GACpD,IAAIsJ,EAAOvC,EAAc5G,GACzB,GAAa,OAATmJ,EAAe,MAAM,IAAIjJ,MAAMrB,EAASuK,0BAE5C,IAAI4B,EAAS,IAAIzE,EAAG/G,GACpB,GAAIwL,EAAOjE,IAAIL,EAASyB,IAAM,GAAK6C,EAAOhD,SAAU,MAAM,IAAI9H,MAAMrB,EAASoM,WAE7E,OAAOjH,EAAOU,KAAKyE,EAAKxB,IAAI6B,IAAIwB,GAAQvF,QAAO,EAAM5F,M,iCCpQvDT,EAAOC,QAAUV,EAAQ,KAARA,CAAiBA,EAAQ,Q","file":"static/js/8.ad1abf5f.chunk.js","sourcesContent":["'use strict'\nvar assert = require('./assert')\nvar der = require('./der')\nvar messages = require('./messages.json')\n\nfunction initCompressedValue (value, defaultValue) {\n  if (value === undefined) return defaultValue\n\n  assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID)\n  return value\n}\n\nmodule.exports = function (secp256k1) {\n  return {\n    privateKeyVerify: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)\n    },\n\n    privateKeyExport: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n      var publicKey = secp256k1.privateKeyExport(privateKey, compressed)\n\n      return der.privateKeyExport(privateKey, publicKey, compressed)\n    },\n\n    privateKeyImport: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n\n      privateKey = der.privateKeyImport(privateKey)\n      if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey\n\n      throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL)\n    },\n\n    privateKeyNegate: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.privateKeyNegate(privateKey)\n    },\n\n    privateKeyModInverse: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.privateKeyModInverse(privateKey)\n    },\n\n    privateKeyTweakAdd: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakAdd(privateKey, tweak)\n    },\n\n    privateKeyTweakMul: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakMul(privateKey, tweak)\n    },\n\n    publicKeyCreate: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCreate(privateKey, compressed)\n    },\n\n    publicKeyConvert: function (publicKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyConvert(publicKey, compressed)\n    },\n\n    publicKeyVerify: function (publicKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      return secp256k1.publicKeyVerify(publicKey)\n    },\n\n    publicKeyTweakAdd: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed)\n    },\n\n    publicKeyTweakMul: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed)\n    },\n\n    publicKeyCombine: function (publicKeys, compressed) {\n      assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID)\n      assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID)\n      for (var i = 0; i < publicKeys.length; ++i) {\n        assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID)\n        assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n      }\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCombine(publicKeys, compressed)\n    },\n\n    signatureNormalize: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      return secp256k1.signatureNormalize(signature)\n    },\n\n    signatureExport: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = secp256k1.signatureExport(signature)\n      return der.signatureExport(sigObj)\n    },\n\n    signatureImport: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImport(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    signatureImportLax: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImportLax(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    sign: function (message, privateKey, options) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      var data = null\n      var noncefn = null\n      if (options !== undefined) {\n        assert.isObject(options, messages.OPTIONS_TYPE_INVALID)\n\n        if (options.data !== undefined) {\n          assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID)\n          assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID)\n          data = options.data\n        }\n\n        if (options.noncefn !== undefined) {\n          assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID)\n          noncefn = options.noncefn\n        }\n      }\n\n      return secp256k1.sign(message, privateKey, noncefn, data)\n    },\n\n    verify: function (message, signature, publicKey) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      return secp256k1.verify(message, signature, publicKey)\n    },\n\n    recover: function (message, signature, recovery, compressed) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID)\n      assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.recover(message, signature, recovery, compressed)\n    },\n\n    ecdh: function (publicKey, privateKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.ecdh(publicKey, privateKey)\n    },\n\n    ecdhUnsafe: function (publicKey, privateKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed)\n    }\n  }\n}\n","'use strict'\nvar toString = Object.prototype.toString\n\n// TypeError\nexports.isArray = function (value, message) {\n  if (!Array.isArray(value)) throw TypeError(message)\n}\n\nexports.isBoolean = function (value, message) {\n  if (toString.call(value) !== '[object Boolean]') throw TypeError(message)\n}\n\nexports.isBuffer = function (value, message) {\n  if (!Buffer.isBuffer(value)) throw TypeError(message)\n}\n\nexports.isFunction = function (value, message) {\n  if (toString.call(value) !== '[object Function]') throw TypeError(message)\n}\n\nexports.isNumber = function (value, message) {\n  if (toString.call(value) !== '[object Number]') throw TypeError(message)\n}\n\nexports.isObject = function (value, message) {\n  if (toString.call(value) !== '[object Object]') throw TypeError(message)\n}\n\n// RangeError\nexports.isBufferLength = function (buffer, length, message) {\n  if (buffer.length !== length) throw RangeError(message)\n}\n\nexports.isBufferLength2 = function (buffer, length1, length2, message) {\n  if (buffer.length !== length1 && buffer.length !== length2) throw RangeError(message)\n}\n\nexports.isLengthGTZero = function (value, message) {\n  if (value.length === 0) throw RangeError(message)\n}\n\nexports.isNumberInInterval = function (number, x, y, message) {\n  if (number <= x || number >= y) throw RangeError(message)\n}\n","'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar bip66 = require('bip66')\n\nvar EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([\n  // begin\n  0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,\n  // private key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  // middle\n  0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,\n  0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,\n  0x21, 0x02, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,\n  0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,\n  0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,\n  0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,\n  // public key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00\n])\n\nvar EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([\n  // begin\n  0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,\n  // private key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  // middle\n  0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,\n  0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,\n  0x41, 0x04, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,\n  0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,\n  0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0E, 0x11,\n  0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10,\n  0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,\n  0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,\n  // public key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00\n])\n\nexports.privateKeyExport = function (privateKey, publicKey, compressed) {\n  var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED)\n  privateKey.copy(result, compressed ? 8 : 9)\n  publicKey.copy(result, compressed ? 181 : 214)\n  return result\n}\n\nexports.privateKeyImport = function (privateKey) {\n  var length = privateKey.length\n\n  // sequence header\n  var index = 0\n  if (length < index + 1 || privateKey[index] !== 0x30) return\n  index += 1\n\n  // sequence length constructor\n  if (length < index + 1 || !(privateKey[index] & 0x80)) return\n\n  var lenb = privateKey[index] & 0x7f\n  index += 1\n  if (lenb < 1 || lenb > 2) return\n  if (length < index + lenb) return\n\n  // sequence length\n  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0)\n  index += lenb\n  if (length < index + len) return\n\n  // sequence element 0: version number (=1)\n  if (length < index + 3 ||\n      privateKey[index] !== 0x02 ||\n      privateKey[index + 1] !== 0x01 ||\n      privateKey[index + 2] !== 0x01) {\n    return\n  }\n  index += 3\n\n  // sequence element 1: octet string, up to 32 bytes\n  if (length < index + 2 ||\n      privateKey[index] !== 0x04 ||\n      privateKey[index + 1] > 0x20 ||\n      length < index + 2 + privateKey[index + 1]) {\n    return\n  }\n\n  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1])\n}\n\nexports.signatureExport = function (sigObj) {\n  var r = Buffer.concat([Buffer.from([0]), sigObj.r])\n  for (var lenR = 33, posR = 0; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n  var s = Buffer.concat([Buffer.from([0]), sigObj.s])\n  for (var lenS = 33, posS = 0; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n  return bip66.encode(r.slice(posR), s.slice(posS))\n}\n\nexports.signatureImport = function (sig) {\n  var r = Buffer.alloc(32, 0)\n  var s = Buffer.alloc(32, 0)\n\n  try {\n    var sigObj = bip66.decode(sig)\n    if (sigObj.r.length === 33 && sigObj.r[0] === 0x00) sigObj.r = sigObj.r.slice(1)\n    if (sigObj.r.length > 32) throw new Error('R length is too long')\n    if (sigObj.s.length === 33 && sigObj.s[0] === 0x00) sigObj.s = sigObj.s.slice(1)\n    if (sigObj.s.length > 32) throw new Error('S length is too long')\n  } catch (err) {\n    return\n  }\n\n  sigObj.r.copy(r, 32 - sigObj.r.length)\n  sigObj.s.copy(s, 32 - sigObj.s.length)\n\n  return { r: r, s: s }\n}\n\nexports.signatureImportLax = function (sig) {\n  var r = Buffer.alloc(32, 0)\n  var s = Buffer.alloc(32, 0)\n\n  var length = sig.length\n  var index = 0\n\n  // sequence tag byte\n  if (sig[index++] !== 0x30) return\n\n  // sequence length byte\n  var lenbyte = sig[index++]\n  if (lenbyte & 0x80) {\n    index += lenbyte - 0x80\n    if (index > length) return\n  }\n\n  // sequence tag byte for r\n  if (sig[index++] !== 0x02) return\n\n  // length for r\n  var rlen = sig[index++]\n  if (rlen & 0x80) {\n    lenbyte = rlen - 0x80\n    if (index + lenbyte > length) return\n    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);\n    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) rlen = (rlen << 8) + sig[index]\n  }\n  if (rlen > length - index) return\n  var rindex = index\n  index += rlen\n\n  // sequence tag byte for s\n  if (sig[index++] !== 0x02) return\n\n  // length for s\n  var slen = sig[index++]\n  if (slen & 0x80) {\n    lenbyte = slen - 0x80\n    if (index + lenbyte > length) return\n    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);\n    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) slen = (slen << 8) + sig[index]\n  }\n  if (slen > length - index) return\n  var sindex = index\n  index += slen\n\n  // ignore leading zeros in r\n  for (; rlen > 0 && sig[rindex] === 0x00; rlen -= 1, rindex += 1);\n  // copy r value\n  if (rlen > 32) return\n  var rvalue = sig.slice(rindex, rindex + rlen)\n  rvalue.copy(r, 32 - rvalue.length)\n\n  // ignore leading zeros in s\n  for (; slen > 0 && sig[sindex] === 0x00; slen -= 1, sindex += 1);\n  // copy s value\n  if (slen > 32) return\n  var svalue = sig.slice(sindex, sindex + slen)\n  svalue.copy(s, 32 - svalue.length)\n\n  return { r: r, s: s }\n}\n","// Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki\n// Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n// NOTE: SIGHASH byte ignored AND restricted, truncate before use\n\nvar Buffer = require('safe-buffer').Buffer\n\nfunction check (buffer) {\n  if (buffer.length < 8) return false\n  if (buffer.length > 72) return false\n  if (buffer[0] !== 0x30) return false\n  if (buffer[1] !== buffer.length - 2) return false\n  if (buffer[2] !== 0x02) return false\n\n  var lenR = buffer[3]\n  if (lenR === 0) return false\n  if (5 + lenR >= buffer.length) return false\n  if (buffer[4 + lenR] !== 0x02) return false\n\n  var lenS = buffer[5 + lenR]\n  if (lenS === 0) return false\n  if ((6 + lenR + lenS) !== buffer.length) return false\n\n  if (buffer[4] & 0x80) return false\n  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) return false\n\n  if (buffer[lenR + 6] & 0x80) return false\n  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) return false\n  return true\n}\n\nfunction decode (buffer) {\n  if (buffer.length < 8) throw new Error('DER sequence length is too short')\n  if (buffer.length > 72) throw new Error('DER sequence length is too long')\n  if (buffer[0] !== 0x30) throw new Error('Expected DER sequence')\n  if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid')\n  if (buffer[2] !== 0x02) throw new Error('Expected DER integer')\n\n  var lenR = buffer[3]\n  if (lenR === 0) throw new Error('R length is zero')\n  if (5 + lenR >= buffer.length) throw new Error('R length is too long')\n  if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)')\n\n  var lenS = buffer[5 + lenR]\n  if (lenS === 0) throw new Error('S length is zero')\n  if ((6 + lenR + lenS) !== buffer.length) throw new Error('S length is invalid')\n\n  if (buffer[4] & 0x80) throw new Error('R value is negative')\n  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) throw new Error('R value excessively padded')\n\n  if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative')\n  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded')\n\n  // non-BIP66 - extract R, S values\n  return {\n    r: buffer.slice(4, 4 + lenR),\n    s: buffer.slice(6 + lenR)\n  }\n}\n\n/*\n * Expects r and s to be positive DER integers.\n *\n * The DER format uses the most significant bit as a sign bit (& 0x80).\n * If the significant bit is set AND the integer is positive, a 0x00 is prepended.\n *\n * Examples:\n *\n *      0 =>     0x00\n *      1 =>     0x01\n *     -1 =>     0xff\n *    127 =>     0x7f\n *   -127 =>     0x81\n *    128 =>   0x0080\n *   -128 =>     0x80\n *    255 =>   0x00ff\n *   -255 =>   0xff01\n *  16300 =>   0x3fac\n * -16300 =>   0xc054\n *  62300 => 0x00f35c\n * -62300 => 0xff0ca4\n*/\nfunction encode (r, s) {\n  var lenR = r.length\n  var lenS = s.length\n  if (lenR === 0) throw new Error('R length is zero')\n  if (lenS === 0) throw new Error('S length is zero')\n  if (lenR > 33) throw new Error('R length is too long')\n  if (lenS > 33) throw new Error('S length is too long')\n  if (r[0] & 0x80) throw new Error('R value is negative')\n  if (s[0] & 0x80) throw new Error('S value is negative')\n  if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) throw new Error('R value excessively padded')\n  if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) throw new Error('S value excessively padded')\n\n  var signature = Buffer.allocUnsafe(6 + lenR + lenS)\n\n  // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n  signature[0] = 0x30\n  signature[1] = signature.length - 2\n  signature[2] = 0x02\n  signature[3] = r.length\n  r.copy(signature, 4)\n  signature[4 + lenR] = 0x02\n  signature[5 + lenR] = s.length\n  s.copy(signature, 6 + lenR)\n\n  return signature\n}\n\nmodule.exports = {\n  check: check,\n  decode: decode,\n  encode: encode\n}\n","'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar createHash = require('create-hash')\nvar BN = require('bn.js')\nvar EC = require('elliptic').ec\n\nvar messages = require('../messages.json')\n\nvar ec = new EC('secp256k1')\nvar ecparams = ec.curve\n\nfunction loadCompressedPublicKey (first, xBuffer) {\n  var x = new BN(xBuffer)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xBuffer, yBuffer) {\n  var x = new BN(xBuffer)\n  var y = new BN(yBuffer)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  var x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (publicKey) {\n  var first = publicKey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (publicKey.length !== 33) return null\n      return loadCompressedPublicKey(first, publicKey.slice(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (publicKey.length !== 65) return null\n      return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65))\n    default:\n      return null\n  }\n}\n\nexports.privateKeyVerify = function (privateKey) {\n  var bn = new BN(privateKey)\n  return bn.cmp(ecparams.n) < 0 && !bn.isZero()\n}\n\nexports.privateKeyExport = function (privateKey, compressed) {\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL)\n\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))\n}\n\nexports.privateKeyNegate = function (privateKey) {\n  var bn = new BN(privateKey)\n  return bn.isZero() ? Buffer.alloc(32) : ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyModInverse = function (privateKey) {\n  var bn = new BN(privateKey)\n  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_RANGE_INVALID)\n\n  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyTweakAdd = function (privateKey, tweak) {\n  var bn = new BN(tweak)\n  if (bn.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\n\n  bn.iadd(new BN(privateKey))\n  if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n  if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\n\n  return bn.toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyTweakMul = function (privateKey, tweak) {\n  var bn = new BN(tweak)\n  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL)\n\n  bn.imul(new BN(privateKey))\n  if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n)\n\n  return bn.toArrayLike(Buffer, 'be', 32)\n}\n\nexports.publicKeyCreate = function (privateKey, compressed) {\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL)\n\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))\n}\n\nexports.publicKeyConvert = function (publicKey, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  return Buffer.from(pair.getPublic(compressed, true))\n}\n\nexports.publicKeyVerify = function (publicKey) {\n  return loadPublicKey(publicKey) !== null\n}\n\nexports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  tweak = new BN(tweak)\n  if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)\n\n  var point = ecparams.g.mul(tweak).add(pair.pub)\n  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)\n\n  return Buffer.from(point.encode(true, compressed))\n}\n\nexports.publicKeyTweakMul = function (publicKey, tweak, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  tweak = new BN(tweak)\n  if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL)\n\n  return Buffer.from(pair.pub.mul(tweak).encode(true, compressed))\n}\n\nexports.publicKeyCombine = function (publicKeys, compressed) {\n  var pairs = new Array(publicKeys.length)\n  for (var i = 0; i < publicKeys.length; ++i) {\n    pairs[i] = loadPublicKey(publicKeys[i])\n    if (pairs[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n  }\n\n  var point = pairs[0].pub\n  for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub)\n  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL)\n\n  return Buffer.from(point.encode(true, compressed))\n}\n\nexports.signatureNormalize = function (signature) {\n  var r = new BN(signature.slice(0, 32))\n  var s = new BN(signature.slice(32, 64))\n  if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  var result = Buffer.from(signature)\n  if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32)\n\n  return result\n}\n\nexports.signatureExport = function (signature) {\n  var r = signature.slice(0, 32)\n  var s = signature.slice(32, 64)\n  if (new BN(r).cmp(ecparams.n) >= 0 || new BN(s).cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  return { r: r, s: s }\n}\n\nexports.signatureImport = function (sigObj) {\n  var r = new BN(sigObj.r)\n  if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n  var s = new BN(sigObj.s)\n  if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n  return Buffer.concat([\n    r.toArrayLike(Buffer, 'be', 32),\n    s.toArrayLike(Buffer, 'be', 32)\n  ])\n}\n\nexports.sign = function (message, privateKey, noncefn, data) {\n  if (typeof noncefn === 'function') {\n    var getNonce = noncefn\n    noncefn = function (counter) {\n      var nonce = getNonce(message, privateKey, null, data, counter)\n      if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL)\n\n      return new BN(nonce)\n    }\n  }\n\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL)\n\n  var result = ec.sign(message, privateKey, { canonical: true, k: noncefn, pers: data })\n  return {\n    signature: Buffer.concat([\n      result.r.toArrayLike(Buffer, 'be', 32),\n      result.s.toArrayLike(Buffer, 'be', 32)\n    ]),\n    recovery: result.recoveryParam\n  }\n}\n\nexports.verify = function (message, signature, publicKey) {\n  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }\n\n  var sigr = new BN(sigObj.r)\n  var sigs = new BN(sigObj.s)\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n  if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false\n\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  return ec.verify(message, sigObj, { x: pair.pub.x, y: pair.pub.y })\n}\n\nexports.recover = function (message, signature, recovery, compressed) {\n  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }\n\n  var sigr = new BN(sigObj.r)\n  var sigs = new BN(sigObj.s)\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  try {\n    if (sigr.isZero() || sigs.isZero()) throw new Error()\n\n    var point = ec.recoverPubKey(message, sigObj, recovery)\n    return Buffer.from(point.encode(true, compressed))\n  } catch (err) {\n    throw new Error(messages.ECDSA_RECOVER_FAIL)\n  }\n}\n\nexports.ecdh = function (publicKey, privateKey) {\n  var shared = exports.ecdhUnsafe(publicKey, privateKey, true)\n  return createHash('sha256').update(shared).digest()\n}\n\nexports.ecdhUnsafe = function (publicKey, privateKey, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  var scalar = new BN(privateKey)\n  if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages.ECDH_FAIL)\n\n  return Buffer.from(pair.pub.mul(scalar).encode(true, compressed))\n}\n","'use strict'\nmodule.exports = require('./lib')(require('./lib/elliptic'))\n"],"sourceRoot":""}